import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Typography,
  CircularProgress,
  Chip,
  TablePagination,
} from '@mui/material';
import { useState } from 'react';
import { useAppDispatch, useAppSelector } from '../../../store';
import { fetchVulnerabilities } from '../../../store/vulnerabilitiesSlice';
import { SEVERITY_COLORS } from '../../../utils/severityConfig';
import type { SeverityLevel } from '../../../types/vulnerability';
import './VulnerabilityTable.css';

interface VulnerabilityTableProps {
  initialLimit?: number;
}

const getSeverityColor = (severity: string): string => {
  return SEVERITY_COLORS[severity as SeverityLevel] || '#666';
};

const formatDate = (dateString?: Date): string => {
  if (!dateString) return 'N/A';
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
};

export const VulnerabilityTable = ({ initialLimit = 10 }: VulnerabilityTableProps) => {
  const dispatch = useAppDispatch();
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(initialLimit);

  // Get data from Redux store
  const { items: vulnerabilities, pagination, loading, error } = useAppSelector(
    (state) => state.vulnerabilities
  );

  const handleChangePage = (_event: unknown, newPage: number) => {
    setPage(newPage);
    dispatch(
      fetchVulnerabilities({
        page: newPage + 1,
        limit: rowsPerPage,
        cursor: newPage > page && pagination?.nextCursor ? pagination.nextCursor : undefined,
      })
    );
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newLimit = parseInt(event.target.value, 10);
    setRowsPerPage(newLimit);
    setPage(0);
    dispatch(
      fetchVulnerabilities({
        page: 1,
        limit: newLimit,
      })
    );
  };

  if (loading && vulnerabilities.length === 0) {
    return (
      <Box className="vulnerability-table__loading">
        <CircularProgress />
        <Typography variant="body2" sx={{ ml: 2 }}>
          Loading vulnerabilities...
        </Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Paper className="vulnerability-table__error">
        <Typography variant="body1" color="error">
          Error loading vulnerabilities: {error}
        </Typography>
      </Paper>
    );
  }

  return (
    <Box className="vulnerability-table">
      <TableContainer component={Paper} elevation={2}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell><strong>CVE</strong></TableCell>
              <TableCell><strong>Severity</strong></TableCell>
              <TableCell align="right"><strong>CVSS</strong></TableCell>
              <TableCell><strong>Package</strong></TableCell>
              <TableCell><strong>Version</strong></TableCell>
              <TableCell><strong>Published</strong></TableCell>
              <TableCell><strong>Status</strong></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {vulnerabilities && vulnerabilities.length > 0 ? (
              vulnerabilities.map((vuln) => (
                <TableRow
                  key={vuln._id}
                  hover
                  className="vulnerability-table__row"
                >
                  <TableCell>
                    <Typography variant="body2" fontWeight={500}>
                      {vuln.cve}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity.toUpperCase()}
                      size="small"
                      sx={{
                        backgroundColor: getSeverityColor(vuln.severity),
                        color: 'white',
                        fontWeight: 600,
                        fontSize: '0.7rem',
                      }}
                    />
                  </TableCell>
                  <TableCell align="right">
                    <Typography variant="body2">{vuln.cvss || 'N/A'}</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" className="vulnerability-table__package">
                      {vuln.packageName}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {vuln.packageVersion || 'N/A'}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {formatDate(vuln.published)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {vuln.status || 'N/A'}
                    </Typography>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} align="center">
                  <Typography variant="body2" color="text.secondary" sx={{ py: 3 }}>
                    No vulnerabilities found
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      <TablePagination
        rowsPerPageOptions={[5, 10, 25, 50, 100]}
        component="div"
        count={pagination?.totalCount ?? -1}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        labelDisplayedRows={({ from, to, count }) =>
          `${from}-${to} of ${count !== -1 ? count.toLocaleString() : 'many'}`
        }
      />
    </Box>
  );
};
