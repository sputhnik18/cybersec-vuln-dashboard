import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Typography,
  CircularProgress,
  Chip,
  Select,
  MenuItem,
  IconButton,
  FormControl,
  InputLabel,
  Button,
} from '@mui/material';
import {
  KeyboardArrowLeft,
  KeyboardArrowRight,
  KeyboardDoubleArrowLeft,
  KeyboardDoubleArrowRight,
} from '@mui/icons-material';
import { useState, useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '../../../store';
import { fetchVulnerabilities } from '../../../store/vulnerabilitiesSlice';
import { SEVERITY_COLORS } from '../../../utils/severityConfig';
import type { SeverityLevel } from '../../../types/vulnerability';
import './VulnerabilityTable.css';

interface VulnerabilityTableProps {
  initialLimit?: number;
}

const getSeverityColor = (severity: string): string => {
  return SEVERITY_COLORS[severity as SeverityLevel] || '#666';
};

const formatDate = (dateString?: Date): string => {
  if (!dateString) return 'N/A';
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
};

export const VulnerabilityTable = ({ initialLimit = 10 }: VulnerabilityTableProps) => {
  const dispatch = useAppDispatch();
  const [page, setPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(initialLimit);

  // Get data from Redux store
  const { items: vulnerabilities, pagination, loading, error, pageCursors } = useAppSelector(
    (state) => state.vulnerabilities
  );

  const totalCount = pagination?.totalCount ?? 0;
  const totalPages = Math.ceil(totalCount / rowsPerPage);
  const MAX_JUMPABLE_PAGE = Math.floor(100000 / rowsPerPage); // Max page we can jump to

  // Sync page state with actual current page from pagination
  useEffect(() => {
    if (pagination?.currentPage && pagination.currentPage !== page) {
      setPage(pagination.currentPage);
    }
  }, [pagination?.currentPage]);

  const handleChangePage = async (newPage: number) => {
    if (newPage < 1 || newPage > totalPages || loading) return;

    const oldPage = page;

    // Determine if we can use cursor (only for next page from current)
    let cursor = null;
    if (newPage === oldPage + 1 && pageCursors[newPage]) {
      // Moving forward to next page - use cursor
      cursor = pageCursors[newPage];
    } else if (newPage === 1) {
      // Going back to first page - no cursor needed
      cursor = null;
    } else if (pageCursors[newPage]) {
      // Have cursor for this page (visited before)
      cursor = pageCursors[newPage];
    }

    // Check if jumping to a far page without cursor
    if (!cursor && newPage > MAX_JUMPABLE_PAGE) {
      alert(`Cannot jump to page ${newPage}. Please use next/previous buttons to navigate sequentially, or jump to pages 1-${MAX_JUMPABLE_PAGE}.`);
      return;
    }

    try {
      const result = await dispatch(
        fetchVulnerabilities({
          page: newPage,
          limit: rowsPerPage,
          cursor: cursor,
        })
      ).unwrap();

      // Only update page state after successful fetch
      if (result) {
        setPage(newPage);
      }
    } catch (err) {
      // On error, keep the current page
      console.error('Failed to fetch page:', err);
    }
  };

  const handleChangeRowsPerPage = (event: any) => {
    const newLimit = parseInt(event.target.value, 10);
    setRowsPerPage(newLimit);
    setPage(1);
    dispatch(
      fetchVulnerabilities({
        page: 1,
        limit: newLimit,
      })
    );
  };

  // Generate page numbers to display
  const getPageNumbers = () => {
    const pages: (number | string)[] = [];
    const maxPagesToShow = 7;

    if (totalPages <= maxPagesToShow) {
      // Show all pages if total is less than max
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Always show first page
      pages.push(1);

      if (page > 3) {
        pages.push('...');
      }

      // Show pages around current page
      const start = Math.max(2, page - 1);
      const end = Math.min(totalPages - 1, page + 1);

      for (let i = start; i <= end; i++) {
        if (!pages.includes(i)) {
          pages.push(i);
        }
      }

      if (page < totalPages - 2) {
        pages.push('...');
      }

      // Always show last page
      if (!pages.includes(totalPages)) {
        pages.push(totalPages);
      }
    }

    return pages;
  };

  if (loading && vulnerabilities.length === 0) {
    return (
      <Box className="vulnerability-table__loading">
        <CircularProgress />
        <Typography variant="body2" sx={{ ml: 2 }}>
          Loading vulnerabilities...
        </Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Paper className="vulnerability-table__error">
        <Typography variant="body1" color="error">
          Error loading vulnerabilities: {error}
        </Typography>
      </Paper>
    );
  }

  const startRow = (page - 1) * rowsPerPage + 1;
  const endRow = Math.min(page * rowsPerPage, totalCount);

  return (
    <Box className="vulnerability-table">
      <TableContainer component={Paper} elevation={2}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell><strong>CVE</strong></TableCell>
              <TableCell><strong>Severity</strong></TableCell>
              <TableCell align="right"><strong>CVSS</strong></TableCell>
              <TableCell><strong>Package</strong></TableCell>
              <TableCell><strong>Version</strong></TableCell>
              <TableCell><strong>Published</strong></TableCell>
              <TableCell><strong>Status</strong></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {vulnerabilities && vulnerabilities.length > 0 ? (
              vulnerabilities.map((vuln) => (
                <TableRow
                  key={vuln._id}
                  hover
                  className="vulnerability-table__row"
                >
                  <TableCell>
                    <Typography variant="body2" fontWeight={500}>
                      {vuln.cve}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity.toUpperCase()}
                      size="small"
                      sx={{
                        backgroundColor: getSeverityColor(vuln.severity),
                        color: 'white',
                        fontWeight: 600,
                        fontSize: '0.7rem',
                      }}
                    />
                  </TableCell>
                  <TableCell align="right">
                    <Typography variant="body2">{vuln.cvss || 'N/A'}</Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" className="vulnerability-table__package">
                      {vuln.packageName}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {vuln.packageVersion || 'N/A'}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {formatDate(vuln.published)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" color="text.secondary">
                      {vuln.status || 'N/A'}
                    </Typography>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} align="center">
                  <Typography variant="body2" color="text.secondary" sx={{ py: 3 }}>
                    No vulnerabilities found
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Custom Pagination UI */}
      <Box
        className="vulnerability-table__pagination"
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '16px',
          backgroundColor: 'var(--color-bg-secondary)',
          borderRadius: '0 0 8px 8px',
          gap: 2,
        }}
      >
        {/* Rows per page selector */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel id="rows-per-page-label">Rows per page</InputLabel>
            <Select
              labelId="rows-per-page-label"
              value={rowsPerPage}
              label="Rows per page"
              onChange={handleChangeRowsPerPage}
            >
              <MenuItem value={10}>10</MenuItem>
              <MenuItem value={25}>25</MenuItem>
              <MenuItem value={50}>50</MenuItem>
              <MenuItem value={100}>100</MenuItem>
            </Select>
          </FormControl>

          <Typography variant="body2" color="text.secondary">
            {startRow}-{endRow} of {totalCount.toLocaleString()}
          </Typography>
        </Box>

        {/* Page navigation */}
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          {/* First page */}
          <IconButton
            onClick={() => handleChangePage(1)}
            disabled={page === 1 || loading}
            size="small"
          >
            <KeyboardDoubleArrowLeft />
          </IconButton>

          {/* Previous page */}
          <IconButton
            onClick={() => handleChangePage(page - 1)}
            disabled={page === 1 || loading}
            size="small"
          >
            <KeyboardArrowLeft />
          </IconButton>

          {/* Page numbers */}
          {getPageNumbers().map((pageNum, index) => {
            if (pageNum === '...') {
              return (
                <Typography key={`ellipsis-${index}`} variant="body2" sx={{ px: 1 }}>
                  ...
                </Typography>
              );
            }

            return (
              <Button
                key={pageNum}
                onClick={() => handleChangePage(pageNum as number)}
                disabled={loading}
                variant={page === pageNum ? 'contained' : 'text'}
                size="small"
                sx={{
                  minWidth: '32px',
                  height: '32px',
                  padding: '4px 8px',
                }}
              >
                {pageNum}
              </Button>
            );
          })}

          {/* Next page */}
          <IconButton
            onClick={() => handleChangePage(page + 1)}
            disabled={page === totalPages || loading}
            size="small"
          >
            <KeyboardArrowRight />
          </IconButton>

          {/* Last page */}
          <IconButton
            onClick={() => handleChangePage(totalPages)}
            disabled={page === totalPages || loading}
            size="small"
          >
            <KeyboardDoubleArrowRight />
          </IconButton>
        </Box>
      </Box>
    </Box>
  );
};
